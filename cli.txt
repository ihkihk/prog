
* Using a REST API
curl --raw -L -X POST --post301 -H "Accept:application/json"
-H "Content-Type: application/json" --data-ascii '{"email":
"singh_vinod@yahoo.com", "password": "password", "username":
"singhvinod494" }' https://index.docker.io/v1/users

curl --raw -L --user vinoddandy:password https://index.docker.io/v1/users

curl -X POST -H "Content-Type: application/json" -d '{"username": "cloudron", "password":"cloudron"}' https://my-demo.cloudron.me/api/v1/developer/login

* Network usage
> netstat -tlpn (TCP/listening/prog/numeric)


* Print headers
> curl -I vimcho.com
> curl -Ivs vimcho.com > /dev/null - prints also request headers and removes duplication by -v

* Running a docker test environment suitable for TDD of SW located in hitcount folder
$ sudo docker run -it -v /home/peter/src/hitcount:/src \
    python:latest /bin/bash
    

* Adding user to a group
> sudo gpasswd -a jenkins newgroup

* Checking for rootkits
> sudo rkhunter --update
> sudo rkhunter --propupd
> sudo rkhunter --check
> sudo chkrootkit
> sudo tiger # (tripwire based!), global pass:vimcho123, local pass:xepy123
after this:
> sudo less /var/log/tiger/security.report.*$


* Checking if reboot is required
> /var/run/reboot-required and /var/run/reboot-required.pkgs (the last one shows which packages have required the reboot)



* HW Monitoring
$ sudo dmidecode -s bios-vendor

* List VGA devices with their drivers
$ update-pciids
$ lspci -k | grep -EA2 "3D|VGA"

* Stop the X server
$ sudo service lightdm stop

* Get Linux distrib info
$ cat /etc/*release

* Inject 25% idle time to reduce temperature
$ grep . /sys/class/thermal/*/type
  .../sys/class/thermal/cooling_device8/type:intel_powerclamp...
$ sudo sudo sh -c "echo 25 > /sys/class/thermal/cooling_device8/cur_state"  

* Managing alternatives
$ sudo update-alternatives --auto x86_64-linux-gnu_gl_conf
$ sudo update-alternatives --config x86_64-linux-gnu_gl_conf
$ sudo update-alternatives --install /etc/ld.so.conf.d/x86_64-linux-gnu_GL.conf x86_64-linux-gnu_gl_conf /usr/lib/x86_64-linux-gnu/mesa/ld.so.conf 500
$ sudo update-alternatives --remove x86_64-linux-gnu_gl_conf /usr/lib/x86_64-linux-gnu/mesa/ld.so.conf
$ sudo ldconfig -n
$ sudo update-initramfs -u
$ cat /var/log/alternatives.log

* Choosing NVIDIA as the primary VGA
$ sudo prime-select nvidia
$ sudo prime-select query

* Restart
$ sudo init 6

* Detect UEFI
$ [ -d /sys/firmware/efi ] && echo "UEFI" || echo "BIOS"
$ dmesg | grep "EFI v"

* Creating initrd as a compressed cpio image
> find . | cpio --quiet -H newc -o | gzip -9 -n > /boot/imagefile.img
* Examining the contents of an existing image file is just as simple::
> mkdir /tmp/imagefile
> cd /tmp/imagefile
> gzip -cd /boot/imagefile.img | cpio -imd --quiet

* Extracting icons from windows *.exe for wine
> wrestool -x -t14 --output=. TINE.exe
> convert TINE_t14_ICON.ico main_icon.png
OR
> for i in *.ico; do convert "$i" "$i.png"; done
- PNG files can be stored here ~/.local/share/icons/hicolor/256x256/apps/
- .DESKTOP files for WINE apps are here: ~/.local/share/applications/wine/Programs/[Prog Name]

* Restarting services
** On a modern systemd Ubuntu
> sudo systemctl restart network-manager (or networking)
** On older versions
> sudo service networking|network-manager restart|start|stop
> sudo service networking restart|start|stop
> sudo /etc/init.d/networking restart|start|stop

* Dumping the ACPI tables
> sudo acpidump > acpidata.dat
> acpixtract -sSSDT acpidata.dat
> acpixtract -sDSDT acpidata.dat
> acpixtract -sFACP acpidata.dat
> iasl -d dsdt.dat ssdt*.dat facp.dat
OR a bit easier with the dev. version of the FW test suite
> sudo fwts acpidump -

* Setting up mysql
> mysql -uroot -p
> create database wordpress;
> create user 'wordpressU'@'localhost' identified by 'wordpressP';
> grant all on wordpress.* to wpU@'localhost' identified by 'wpP';
> flush priviliges;
> exit

* Installing LAMP stack (Linux, Apache, MySQL, PHP7) on Ubuntu 16.04 [link](https://www.linode.com/docs/web-servers/lamp/install-lamp-on-ubuntu-16-04)
> sudo apt-get update && sudo apt-get upgrade
** Apache2
> sudo apt-get install apache2
> In /etc/apache2/apache2.conf: KeepAlive Off
* The default multi-processing module (MPM) for Apache is the event module but by default PHP uses the prefork module. Open the mpm_prefork.conf file located in /etc/apache2/mods-available and edit the configuration. Below are the suggested values for a 2GB Linode:
> In /etc/apache2/mods-available/mpm_prefork.conf:
<IfModule mpm_prefork_module>
        StartServers            4
        MinSpareServers         20
        MaxSpareServers         40
        MaxRequestWorkers       200
        MaxConnectionsPerChild  4500
</IfModule>
* Disable the event module and enable prefork:
> sudo a2dismod mpm_event
> sudo a2enmod mpm_prefork
> sudo systemctl restart apache2
* Configure virtual hosts
In file: /etc/apache2/sites-available/example.com.conf
<Directory /var/www/html/example.com/public_html>
    Require all granted
</Directory>
<VirtualHost *:80>
        ServerName example.com
        ServerAlias www.example.com
        ServerAdmin webmaster@localhost
        DocumentRoot /var/www/html/example.com/public_html

        ErrorLog /var/www/html/example.com/logs/error.log
        CustomLog /var/www/html/example.com/logs/access.log combined

</VirtualHost>
> sudo mkdir -p /var/www/html/example.com/{public_html,logs}
> Enable virtual host: sudo a2ensite example.com.conf (to disable: a2dissite example.com.conf)
> Disable the default virtual host to minimize security risks: sudo a2dissite 000-default.conf
> sudo systemctl reload apache2
** MySQL
> sudo apt-get install mysql-server
> mysql -u root -p
> ALTER USER 'root'@'localhost' IDENTIFIED WITH 'mysql_native_password' BY 'password';
> CREATE DATABASE webdata;
> GRANT ALL ON webdata.* TO 'webuser' IDENTIFIED BY 'password';
** PHP7
> sudo apt-get install php7.0 php-pear libapache2-mod-php7.0 php7.0-mysql
> sudo apt-get install php7.0-curl php7.0-json php7.0-cgi
> In file: /etc/php/7.0/apache2/php.ini
max_input_time = 30
error_reporting = E_COMPILE_ERROR | E_RECOVERABLE_ERROR | E_ERROR | E_CORE_ERROR
error_log = /var/log/php/error.log
> sudo mkdir /var/log/php
> sudo chown www-data /var/log/php
> sudo systemctl restart apache2

* Installing Magento2 as seen on [link](https://www.linode.com/docs/websites/ecommerce/install-magento-on-ubuntu-16-04)
> Install LAMP
> sudo apt-get install php7.0-common php7.0-gd php7.0-mcrypt php7.0-curl php7.0-intl php7.0-xsl php7.0-mbstring php7.0-zip php7.0-iconv mysql-client
> Make sure apache2 -v > 2.4
> sudo a2enmod rewrite
> Set apache virtual host to:
<Directory /var/www/html/example.com/public_html>
    Require all granted
</Directory>
<VirtualHost *:80>
    ServerName example.com
    ServerAlias www.example.com
    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/html/example.com/public_html

    ErrorLog /var/www/html/example.com/logs/error.log
    CustomLog /var/www/html/example.com/logs/access.log combined

    <Directory /var/www/html/example.com/public_html>
        Options Indexes FollowSymLinks MultiViews
        AllowOverride All
    </Directory>

</VirtualHost>
* Setup mysql
CREATE DATABASE magento;
CREATE USER 'magento' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON magento.* TO 'magento';
* Configure PHP
In /etc/php/7.0/apache2/php.ini AND /etc/php/7.0/cli/php.ini:
memory_limit = 512M (half of the machine memory)
date.timezone = Europe/Zurich
* Extract Magento Community Edition into /var/www/html/example.com/public_html
> sudo useradd magento
> sudo usermod -g www-data magento
> sudo find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \;
> sudo find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \;
> sudo chown -R magento:www-data .
> sudo chmod u+x bin/magento
> sudo systemctl restart apache2
> sudo su magento
> cd bin
> ./magento setup:install --admin-firstname="Ivailo" --admin-lastname="Kassamakov" --admin-email="ivokassamakov@gmail.com" --admin-user="admin" --admin-password="admin123" --db-name="magento" --db-host="localhost" --db-user="magentoU" --db-password="magentoP" --base-url=https://eshop.vimcho.com
* Set cron jobs for the magento user
> sudo crontab -u magento -e
Add these lines:
* * * * * /usr/bin/php /var/www/html/example.com/public_html/bin/magento cron:run | grep -v "Ran jobs by schedule" >> /var/www/html/example.com/public_html/var/log/magento.cron.log
* * * * * /usr/bin/php /var/www/html/example.com/public_html/update/cron.php >> /var/www/html/example.com/public_html/var/log/update.cron.log
* * * * * /usr/bin/php /var/www/html/example.com/public_html/bin/magento setup:cron:run >> /var/www/html/example.com/public_html/var/log/setup.cron.log
* Deny X-Frames
In /var/www/html/example.com/public_html/app/etc/env.php:
'x-frame-options' => 'DENY',
* At a minimum, you should restrict write access to the app/etc directory before opening the site to customers. Run these commands from within your Magento installation directory:
> sudo find app/etc -type f -exec chmod g-w {} \;
> sudo find app/etc -type d -exec chmod g-ws {} \;
* In the admin panel - Stores - Configuration - General - Web - Base URLs (Secure) set the url to https://.....
* Set up Varnish


## SSL
* Create self-signed certificate seen [here](https://www.linode.com/docs/security/ssl/create-a-self-signed-certificate-on-debian-and-ubuntu)
> openssl req -new -x509 -sha256 -days 365 -nodes -out /etc/ssl/certs/example.com.crt -keyout /etc/ssl/private/example.com.key
> chmod 400 /etc/ssl/certs/example.com.crt
> chmod 400 /etc/ssl/private/example.com.key
> cat my.key my.crt > my.pem

## Varnish
* Configuring apache
> Make apache listen on 8080 in /etc/apache2/apache2.conf and in all VirtualHost definitions
* Setting up varnish on systemd system
> Systemd reads the config from /etc/systemd/system/multi-user.target.wants/varnish.service and not from /etc/default/varnish !
* Analyzing Varnish activity
> varnishlog
> varnishtop -i txurl
> varnishstat
* Optimizing cookies handling for increasing hit rate
** Removing all client-set Cookies except if the request url is /admin/
> put in the vcl_rcv in /etc/varnish/default.vcl
if ( !( req.url ~ ^/admin/) ) {
  unset req.http.Cookie;
}
> to remove client-sent cookies starting with underscore or has_js (Google Analytics)
// Remove has_js and Google Analytics __* cookies.
set req.http.Cookie = regsuball(req.http.Cookie, "(^|;\s*)(_[_a-z]+|has_js)=[^;]*", "");
// Remove a ";" prefix, if present.
set req.http.Cookie = regsub(req.http.Cookie, "^;\s*", "");
* Purging the cache
> curl -X PURGE http://www.dimitri.eu/php-fpm-apache-split-config-per-site/    (The config file must be setup to allow this)
> varnishadm -T 127.0.0.1:6082 -S /etc/varnish/secret 
  varnish> ban req.url ~ * && req.http.host ~ www.dimitri.eu

## Installing the Open-Source font
$ wget http://www.fontsquirrel.com/fonts/download/open-sans
$ sudo unzip open-sans -d /usr/local/share/fonts/truetype/
$ rm open-sans
$ fc-cache
$ fc-match "Open Sans"  - should output OpenSans-Regular.ttf: "Open Sans" "Regular"

